function [vtracks,tracks] = ImageProcessingAndTrackingCalling(settings,Imagefolder,ImageSuffix,frame_list,SplitData,SaveDirec)
%[vtracks,tracks] = ImageProcessingAndTrackingCalling(settings,Imagefolder,ImageSuffix,frame_list,SplitData,SaveDirec)
% For this function to work you have to specify a frame_list. Settings.mat file
%can be generated from the GUI for settings. SplitData value is how many
%times you want to split the frame_list so you don't overload the ram.
if SplitData
    SizeEachSplit = round(numel(frame_list)/SplitData,-2)+1;
else
    SizeEachSplit = numel(frame_list);
end
NumSaveDigits = numel(num2str(frame_list(end)));
SplitCounter = 0;
for SplitFrame = 1:SizeEachSplit:numel(frame_list)
    if SplitFrame<=numel(frame_list)-SizeEachSplit
        Splitframe_list = frame_list(SplitFrame:SplitFrame+SizeEachSplit);
    else
        Splitframe_list = frame_list(SplitFrame:end);
    end
    SplitCounter = SplitCounter + 1;
    addpath(genpath('.'))
    fig = uifigure;
    [img,BitDepth] = LoadImages(Imagefolder,ImageSuffix,settings.BitShift,Splitframe_list,settings.FlipLighting,fig);
    if settings.Rotate
        img = rot90(img,settings.Rotate);
    end
    %Homomorphic Filter
    if settings.ImHFiltBool == "On"
        img = HomomorphicFilter(img,settings.Sigma,settings.Alpha,settings.Beta,BitDepth,fig);
    end
    %Background Subtraction
    if settings.BgSubBool == "On"
        img = SubtractBackground(img,settings.FrameSkip,settings.RollingWindow,fig);
    end
    %Image Contrast Adjustment
    if settings.ImAdjustBool == "On"
        img = ImageAdjust(img,settings.adjustlow,settings.adjusthigh,settings.gamma,fig);
    end
    %Image Sharpening
    if settings.ImSharpBool == "On"
        img = ImageSharpening(img,settings.SharpenRadius,settings.SharpenAmount,settings.SharpenThreshold,fig);
    end
    d = uiprogressdlg(fig,'Title','Please Wait','Message',['Saving Images ' num2str(Splitframe_list(1)) ' to ' num2str(Splitframe_list(end))]...
        ,'Indeterminate','on');
    drawnow
    parfor i = 1:numel(Splitframe_list)
        imwrite(img(:,:,i),[SaveDirec filesep 'data_' sprintf(['%0' num2str(NumSaveDigits) 'd'],Splitframe_list(i)) '.tif'])
    end
    % -=- Find particles in all frames -=-------------------------------------
    [x,y,t,ang]=ParticleFinder(img,settings.threshold,Splitframe_list,[],[],arealim,invert,0);
    save([SaveDirecAnalyzed '\Data_Split\SplitData_' sprintf(['%0' num2str(2) 'd'],SplitCounter) '.mat'],'x','y','t','ang')

    close(d)
    close(fig)
end
clearvars img x t y ang
%% Concatenate Split Data Files to one file
SplitDataFiles = dir([filepaths.analyzeddir '\Data_Split']); 
NumFiles = numel(SplitDataFiles);

xCat = cell(1,NumFiles-2); yCat = cell(1,NumFiles-2);
tCat = cell(1,NumFiles-2); angCat = cell(1,NumFiles-2);

for j = 3:NumFiles
    disp(['On file num ' num2str(j-2) ' of ' num2str(NumFiles-2)]);
    load([SplitDataFiles(j).folder filesep SplitDataFiles(j).name],'x','y','t','ang')
    xCat{j-2} = x; yCat{j-2} = y;
    tCat{j-2} = t;  angCat{j-2} = ang;
end

x = cat(1,xCat{:}); y = cat(1,yCat{:});
t = cat(1,tCat{:}); ang = cat(1,angCat{:}); 

save([filepaths.analyzeddir '\ParticleFinder_Data.mat'],"x","y","t","ang",'-v7.3')
clearvars xCat yCat tCat angCat
%% Perform tracking
%Tracking
[vtracks,~,~,~,tracks] = PredictiveTracker(x,y,t,ang,settings.max_disp,settings.minarea);




end



